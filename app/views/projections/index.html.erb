<div class="wrapper">
  <div class="container">
    <% if !@found_projections.empty? %>
      <div class="text-center">
        <%= render "search-form" %>
      </div>
      <h2><%= @searched_location %></h2>
      <% @found_projections.each do |projection| %>
        <%= render "projection-index", projection: projection %>
      <% end %>
    <% else %>
      <div>
        <div class="text-center">
          <h1>ðŸ˜”</h1>
          <h2> We have trouble finding projections matching your request: <%= @searched_location %></h2>
          <h2>Maybe try another city ?</h2>
          <h2>â¬‡</h2>
        </div>
      </div>
      <div class="text-center"><%= render "search-form" %></div>
      <div style="height: 60px"></div>
      <h3 class="text-center">or browse upcoming projections elsewhere:</h3>

      <% @proposed_projections.each_with_index do |projection, index| %>
        <%= render "projection-index", projection: projection, index: index %>

      <% end %>
    <% end %>
  </div>
</div>

<% content_for(:after_js) do %>
  <script>
    $(document).on('ready', function() {
      var style = [{"featureType":"administrative.country","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"administrative.province","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"administrative.locality","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"administrative.neighborhood","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"administrative.land_parcel","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"landscape.man_made","elementType":"geometry.fill","stylers":[{"visibility":"off"},{"hue":"#ff0000"}]},{"featureType":"landscape.natural.landcover","elementType":"geometry.fill","stylers":[{"saturation":"48"},{"visibility":"off"},{"color":"#b0b0b0"}]},{"featureType":"landscape.natural.landcover","elementType":"labels.text.fill","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"},{"saturation":"-11"}]},{"featureType":"poi","elementType":"geometry.fill","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"poi.attraction","elementType":"geometry.fill","stylers":[{"visibility":"off"}]},{"featureType":"poi.place_of_worship","elementType":"geometry.fill","stylers":[{"visibility":"off"},{"color":"#a53b3b"}]},{"featureType":"poi.place_of_worship","elementType":"geometry.stroke","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"geometry.fill","stylers":[{"color":"#ffffff"},{"visibility":"on"}]},{"featureType":"road","elementType":"geometry.stroke","stylers":[{"gamma":7.18}]},{"featureType":"road","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"visibility":"on"}]},{"featureType":"road.highway","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"road.local","elementType":"geometry.fill","stylers":[{"visibility":"on"}]},{"featureType":"road.local","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"transit.line","elementType":"geometry","stylers":[{"gamma":0.48}]},{"featureType":"transit.station","elementType":"geometry.fill","stylers":[{"visibility":"off"}]},{"featureType":"transit.station","elementType":"labels.text.fill","stylers":[{"visibility":"off"}]},{"featureType":"transit.station","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"water","elementType":"all","stylers":[{"color":"#4d4946"}]},{"featureType":"water","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"color":"#ffffff"}]}]
      var projectionIds = JSON.parse('<%= @proposed_projections.map(&:id) %>');
      var handler = Gmaps.build('Google');
      projectionIds.forEach(function(id) {
        handler.buildMap({
          provider: {
              styles: style
            },
          internal: { id: 'map_' + id } }, function() {
          markers = handler.addMarkers(<%= raw @hash.to_json %>);
          handler.bounds.extendWith(markers);
          handler.fitMapToBounds();
          if (markers.length == 0) {
            handler.getMap().setZoom(2);
          } else if (markers.length == 1) {
            handler.getMap().setZoom(14);
          }
        });
      })
    });
  </script>
<% end %>
